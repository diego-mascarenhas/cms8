name: cPanel (Prod)

on:
  push:
    branches:
      - main

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}

    steps:
    - uses: actions/checkout@v4

    - name: Compile CSS and JavaScript
      run: |
        rm -rf node_modules 
        rm -rf package-lock.json
        rm -rf yarn.lock
        npm cache clean --force 
        npm install --legacy-peer-deps 
        yarn
        yarn run dev

    - name: Configure PHP 8.2
      uses: shivammathur/setup-php@master
      with:
        php-version: '8.2'
        extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

    - name: Install Composer Dependencies
      run: composer install --no-dev --no-interaction --prefer-dist

    - name: Create deployment artifact
      env:
        GITHUB_SHA: ${{ github.sha }}

      run: tar -czf "${{ github.sha }}".tar.gz --exclude=*.git --exclude=node_modules --exclude='*-deploy-*.json' *

    - name: Create artifact for distribution
      uses: actions/upload-artifact@v4
      with:
        name: app-build
        path: ${{ github.sha }}.tar.gz

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
  
    - name: Export deployment matrix
      id: export-deployment-matrix
      run: |
          JSON=$(jq -c . .github/workflows/prod-deploy-cpanel.json)
          echo "deployment-matrix=$JSON" >> $GITHUB_OUTPUT
       
  prepare-release-on-servers:
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_GITHUB_KEY }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_GITHUB_KEY }}
          port: ${{ matrix.server.port }}
        
          envs: GITHUB_SHA
        
          script: |
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}"
            mkdir -p ${{ matrix.server.path }}/storage/{app,public,framework,logs}
            mkdir -p ${{ matrix.server.path }}/storage/framework/{cache,sessions,testing,views}
            mkdir -p ${{ matrix.server.path }}/storage/framework/cache
            chmod -R 0777 ${{ matrix.server.path }}/storage

  run-before-hooks:
    name: "${{ matrix.server.name }}: Before hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_GITHUB_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,BASE_PATH
          script: |
            cd ${{ matrix.server.path }}
            
            sed -i '/^APP_VERSION=/d' .env
            sed -i "/^APP_URL=.*/a APP_VERSION=${GITHUB_SHA}" .env

            if grep -q '^APP_KEY=' .env && ! grep -q 'APP_KEY=[a-zA-Z0-9]' .env; then
              echo "APP_KEY is empty. Running 'php artisan key:generate'."
              php artisan key:generate
              php artisan storage:link
            else
              echo "APP_KEY already set. Skipping 'php artisan key:generate'."
            fi
            
            ${{ matrix.server.beforeHooks }}

  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_GITHUB_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,BASE_PATH
          script: |
            cd ${{ matrix.server.path }}
            ${{ matrix.server.afterHooks }}

  clean-up:
    name: "${{ matrix.server.name }}: Clean up"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, activate-release ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run Clean up
        uses: appleboy/ssh-action@master
        env:
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_GITHUB_KEY }}
          port: ${{ matrix.server.port }}
          envs: ARTIFACTS_PATH
          script: |
            cd $ARTIFACTS_PATH && ls -t | tail -n +4 | xargs rm -rf
            
